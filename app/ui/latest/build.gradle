apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlinx-serialization'

if (rootProject.testCoverage) {
    apply plugin: 'jacoco'
}

dependencies {
    api project(":app:ui:base")
    implementation project(":app:core")
    implementation project(":app:autodiscovery:api")
    implementation project(":mail:common")

    implementation "androidx.core:core-ktx:${versions.androidxCore}"
    implementation "com.jakewharton.timber:timber:${versions.timber}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinCoroutines}"

    implementation "androidx.activity:activity-compose:${versions.compose}"
    implementation "androidx.compose.ui:ui-tooling:${versions.compose}"
    implementation "androidx.compose.ui:ui:${versions.compose}"
    implementation "androidx.compose.foundation:foundation:${versions.compose}"
    implementation "androidx.compose.material:material:${versions.compose}"
    implementation "androidx.navigation:navigation-compose:${versions.composeNavigation}"
    implementation "io.insert-koin:koin-androidx-compose:${versions.koin}"
    implementation "net.openid:appauth:${versions.appAuth}"
    implementation "io.ktor:ktor-client-core:${versions.ktor}"
    implementation "io.ktor:ktor-client-okhttp:${versions.ktor}"
    implementation "io.ktor:ktor-client-serialization:${versions.ktor}"

    testImplementation project(':mail:testing')
    testImplementation project(':app:testing')
    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "io.ktor:ktor-client-mock:${versions.ktor}"
    testImplementation "com.google.truth:truth:${versions.truth}"
    testImplementation "io.insert-koin:koin-test-junit4:${versions.koin}"

    testImplementation "io.mockk:mockk:${versions.mockk}"
    testImplementation "io.mockk:mockk-agent-jvm:${versions.mockk}"

    androidTestImplementation("androidx.compose.ui:ui-test-junit4:${versions.compose}")
    androidTestImplementation "io.mockk:mockk-android:${versions.mockk}"
    debugImplementation("androidx.compose.ui:ui-test-manifest:${versions.compose}")
}

android {
    compileSdkVersion buildConfig.compileSdk
    buildToolsVersion buildConfig.buildTools

    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.robolectricSdk

        resValue "string", "google_redirect_scheme", googleRedirectScheme
        resValue "string", "google_redirect_url", googleRedirectUrl
        resValue "string", "google_client_id", googleClientId

        resValue "string", "outlook_redirect_scheme", outlookRedirectScheme
        resValue "string", "outlook_redirect_url", outlookRedirectUrl
        resValue "string", "outlook_client_id", outlookClientId
        resValue "string", "outlook_host", outlookHost

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
        lintConfig file("$rootProject.projectDir/config/lint/lint.xml")
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = versions.compose
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    kotlinOptions {
        jvmTarget = kotlinJvmVersion
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

